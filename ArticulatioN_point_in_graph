//User function Template for C++

class Solution {
  public:
  void dfs(int i,vector<int>adj[],vector<int>&ans,vector<int>&disc
  ,vector<int>&low,int &par,vector<int>&vis,int &timer){
      vis[i]=1;
      low[i]=disc[i]=timer++;
      int child=0;
      for(auto j:adj[i]){
          if(par==j)continue;
          if(!vis[j]){
              dfs(j,adj,ans,disc,low,i,vis,timer);
              low[i]=min(low[i],low[j]);
              if(low[j]>=disc[i]&&par!=-1){
                  ans[i]=1;
              }
              child++;
          }
          else{
              //backedge
              low[i]=min(low[i],disc[j]);
          }
      }
      if(par==-1&&child>1){
          ans[i]=1;
      }
  }
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        // Code here
        vector<int>ans(V,0);
        vector<int>disc(V,-1);
        vector<int>low(V,-1);
        int par=-1;
        vector<int>vis(V,0);
        disc[0]=low[0]=0;
        int timer=0;
        for(int i=0;i<V;i++){
            if(!vis[i])dfs(i,adj,ans,disc,low,par,vis,timer);
        }
        vector<int>ap;
        for(int i=0;i<V;i++){
            if(ans[i]==1)ap.push_back(i);
        }
        if(ap.size()==0)return {-1};
        return ap;
    }
};
