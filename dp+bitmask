

// LEETCODE 1799 DP+BITMASK


class Solution {
public:
    vector<int>dp;
    
    int solve(int op,vector<int>&nums,int &mask){
        if(dp[mask]!=-1) return dp[mask];
        int max_score=0;

        for(int i=0;i<nums.size();i++){
            if(!(mask & (1<<i))){
                for(int j=i+1;j<nums.size();j++){
                    if(!(mask & (1<<j))){
                        // marking visited
                        mask= mask|(1<<i);
                        mask= mask|(1<<j);
                       // int new_mask= mask|(1<<i)|(1<<j);
                        int score=(op)*__gcd(nums[i],nums[j]);
                        int new_score= score + solve(op+1,nums,mask);
                        // marking unvisited
                         mask= mask ^ (1<<i);
                         mask= mask ^ (1<<j);
                         max_score= max(max_score,new_score);
                    }
                   
                }
            }
           
        }
        return dp[mask]=max_score;
    }
    int maxScore(vector<int>& nums) {
        // dp size
        // n/2 operations 2^n states
        int n=nums.size();
         dp.assign(1<<n,-1);
       // vector<bool>vis(n,0);
       int mask=0;
        return solve(1,nums,mask);
    }
};
